/*
Book Search Service

A service for searching books by title, author, or ISBN.

API version: 1.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Book type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Book{}

// Book struct for Book
type Book struct {
	Title *string `json:"title,omitempty"`
	Author *string `json:"author,omitempty"`
	Isbn *string `json:"isbn,omitempty"`
	CoverImage *string `json:"cover_image,omitempty"`
}

// NewBook instantiates a new Book object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBook() *Book {
	this := Book{}
	return &this
}

// NewBookWithDefaults instantiates a new Book object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBookWithDefaults() *Book {
	this := Book{}
	return &this
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *Book) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Book) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *Book) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *Book) SetTitle(v string) {
	o.Title = &v
}

// GetAuthor returns the Author field value if set, zero value otherwise.
func (o *Book) GetAuthor() string {
	if o == nil || IsNil(o.Author) {
		var ret string
		return ret
	}
	return *o.Author
}

// GetAuthorOk returns a tuple with the Author field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Book) GetAuthorOk() (*string, bool) {
	if o == nil || IsNil(o.Author) {
		return nil, false
	}
	return o.Author, true
}

// HasAuthor returns a boolean if a field has been set.
func (o *Book) HasAuthor() bool {
	if o != nil && !IsNil(o.Author) {
		return true
	}

	return false
}

// SetAuthor gets a reference to the given string and assigns it to the Author field.
func (o *Book) SetAuthor(v string) {
	o.Author = &v
}

// GetIsbn returns the Isbn field value if set, zero value otherwise.
func (o *Book) GetIsbn() string {
	if o == nil || IsNil(o.Isbn) {
		var ret string
		return ret
	}
	return *o.Isbn
}

// GetIsbnOk returns a tuple with the Isbn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Book) GetIsbnOk() (*string, bool) {
	if o == nil || IsNil(o.Isbn) {
		return nil, false
	}
	return o.Isbn, true
}

// HasIsbn returns a boolean if a field has been set.
func (o *Book) HasIsbn() bool {
	if o != nil && !IsNil(o.Isbn) {
		return true
	}

	return false
}

// SetIsbn gets a reference to the given string and assigns it to the Isbn field.
func (o *Book) SetIsbn(v string) {
	o.Isbn = &v
}

// GetCoverImage returns the CoverImage field value if set, zero value otherwise.
func (o *Book) GetCoverImage() string {
	if o == nil || IsNil(o.CoverImage) {
		var ret string
		return ret
	}
	return *o.CoverImage
}

// GetCoverImageOk returns a tuple with the CoverImage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Book) GetCoverImageOk() (*string, bool) {
	if o == nil || IsNil(o.CoverImage) {
		return nil, false
	}
	return o.CoverImage, true
}

// HasCoverImage returns a boolean if a field has been set.
func (o *Book) HasCoverImage() bool {
	if o != nil && !IsNil(o.CoverImage) {
		return true
	}

	return false
}

// SetCoverImage gets a reference to the given string and assigns it to the CoverImage field.
func (o *Book) SetCoverImage(v string) {
	o.CoverImage = &v
}

func (o Book) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Book) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Author) {
		toSerialize["author"] = o.Author
	}
	if !IsNil(o.Isbn) {
		toSerialize["isbn"] = o.Isbn
	}
	if !IsNil(o.CoverImage) {
		toSerialize["cover_image"] = o.CoverImage
	}
	return toSerialize, nil
}

type NullableBook struct {
	value *Book
	isSet bool
}

func (v NullableBook) Get() *Book {
	return v.value
}

func (v *NullableBook) Set(val *Book) {
	v.value = val
	v.isSet = true
}

func (v NullableBook) IsSet() bool {
	return v.isSet
}

func (v *NullableBook) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBook(val *Book) *NullableBook {
	return &NullableBook{value: val, isSet: true}
}

func (v NullableBook) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBook) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


